from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext

from handlers.bot_functions_common import show_status_typing
from parsers.api_currency import get_exchange_rates
from resources.bot_keyboards import *
from resources.states import *
from resources.user_logger import create_local_logger

router = Router()
user_logger = create_local_logger()


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞–∑–¥–µ–ª—É –≤–∞–ª—é—Ç—ã
@router.callback_query(F.data == cd_currency)
async def back_to_currency_main_menu(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == cd_currency:
        await show_status_typing(callback.bot, callback.message.chat.id)
        await callback.message.answer(
            text=message_select_currency_activity,
            reply_markup=currency_action_buttons(),
        )
        await state.set_state(CurrencyBranch.currency_activity)
        await state.clear()
        user_logger.info(f"–í–´–ë–û–† –¢–ï–ú–´: –≤–∞–ª—é—Ç–∞ (user: {callback.from_user.id})")
    else:
        await callback.message.answer(text=message_invalid_input_text)
        user_logger.warning(
            f"–í–´–ë–û–† –¢–ï–ú–´: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ (user: {callback.from_user.id})"
        )


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–∞–ª—é—Ç—ã
@router.callback_query(F.data.in_([cd_exchange_rate, cd_calculator]))
async def select_currency_activities(callback: types.CallbackQuery, state: FSMContext):
    await show_status_typing(callback.bot, callback.message.chat.id)
    if callback.data in [cd_exchange_rate, cd_calculator]:
        rates_dict = get_exchange_rates()
        rates_dict["BYN"] = ("üáßüáæ", "–ë–µ–ª–∞—Ä—É—Å—å", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å", "1", "1")
        rates = str()
        for key, value in rates_dict.items():
            rates += f"{value[0]} {key} ‚Äî {value[2]}: {value[3]} (–∑–∞ {value[4]} –µ–¥.)\n"
        await state.update_data(rates=rates_dict)
        if callback.data == cd_exchange_rate:
            await callback.message.answer(
                text=message_exchange_rates + rates,
                reply_markup=currency_main_menu_button(),
            )
            user_logger.info(f"–ö–£–†–° –í–ê–õ–Æ–¢: —Ä–µ–∑—É–ª—å—Ç–∞—Ç (user: {callback.from_user.id})")
        elif callback.data == cd_calculator:
            await callback.message.answer(
                text=message_input_currency_from,
                reply_markup=currency_main_menu_button(),
            )
            await state.set_state(CurrencyBranch.currency_activity_calculator)
            user_logger.info(
                f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: –≤–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã (user: {callback.from_user.id})"
            )
        else:
            await callback.message.answer(text=message_invalid_input_text)
            user_logger.warning(
                f"–í–ê–õ–Æ–¢–ê: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ (user: {callback.from_user.id})"
            )


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤–∞–ª—é—Ç
@router.message(CurrencyBranch.currency_activity_calculator)
async def select_currency_from(message: types.Message, state: FSMContext):
    await show_status_typing(message.bot, message.chat.id)
    if message.text in currency_info.keys():
        await state.update_data(from_currency=message.text)
        await message.answer(
            text=message_input_currency_to, reply_markup=currency_main_menu_button()
        )
        await state.set_state(CurrencyBranch.currency_activity_calculator_from)
        user_logger.info(
            f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: –≤–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã (user: {message.from_user.id})"
        )
    else:
        await message.answer(text=message_invalid_currency)
        user_logger.warning(
            f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã (user: {message.from_user.id})"
        )


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤–∞–ª—é—Ç
@router.message(CurrencyBranch.currency_activity_calculator_from)
async def select_currency_to(message: types.Message, state: FSMContext):
    await show_status_typing(message.bot, message.chat.id)
    if message.text in currency_info.keys():
        await state.update_data(to_currency=message.text)
        await message.answer(
            text=message_input_amount, reply_markup=currency_main_menu_button()
        )
        await state.set_state(CurrencyBranch.currency_activity_calculator_from_to)
        user_logger.info(
            f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: –≤–≤–æ–¥ —Å—É–º–º—ã (user: {message.from_user.id})"
        )
    else:
        await message.answer(text=message_invalid_currency)
        user_logger.info(
            f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã (user: {message.from_user.id})"
        )


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤–∞–ª—é—Ç
@router.message(CurrencyBranch.currency_activity_calculator_from_to)
async def select_currency_to(message: types.Message, state: FSMContext):
    await show_status_typing(message.bot, message.chat.id)
    if message.text.isdecimal():
        data = await state.get_data()
        to_currency = data.get("to_currency")
        from_currency = data.get("from_currency")
        rates_dict = data.get("rates")
        byn_amount = (
            float(message.text) * float(rates_dict[from_currency][3])
        ) / float(rates_dict[from_currency][4])
        result = (byn_amount * float(rates_dict[to_currency][4])) / float(
            rates_dict[to_currency][3]
        )
        await message.answer(
            text=message_convert_result
            + from_currency
            + " "
            + rates_dict[from_currency][0]
            + " "
            + message.text
            + "    "
            + "üîÑ"
            + "    "
            + to_currency
            + " "
            + rates_dict[to_currency][0]
            + " "
            + str(round(result, 2)),
            reply_markup=currency_main_menu_button(),
        )
        await state.set_state(
            CurrencyBranch.currency_activity_calculator_from_to_amount
        )
        user_logger.info(f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: —Ä–µ–∑—É–ª—å—Ç–∞—Ç (user: {message.from_user.id})")
    else:
        await message.answer(text=message_invalid_amount)
        user_logger.warning(
            f"–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –í–ê–õ–Æ–¢: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã (user: {message.from_user.id})"
        )
